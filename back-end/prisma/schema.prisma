// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum for user types
enum UserType {
  CUSTOMER
  ADMIN
}

// Enum for payment statuses
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// Enum for order statuses
enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Model for users (customers and admins)
model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique
  firstName         String
  lastName          String
  password          String
  email             String            @unique
  phoneNumber       String
  avatar            String?
  userType          UserType
  orders            Order[]
  shippingAddresses ShippingAddress[]
  Cards             Card[]
  shoppingCart      ShoppingCart?
}

// Model for products
model Product {
  id               Int                @id @default(autoincrement())
  name             String
  productImg       String
  description      String?
  color            String
  capacity         String
  price            Float
  stock            Int
  orderDetails     OrderDetail[]
  shoppingCartItem ShoppingCartItem[]
}

// Model for shopping carts
model ShoppingCart {
  id                Int                @id @default(autoincrement())
  userId            Int                @unique
  user              User               @relation(fields: [userId], references: [id])
  shoppingCartItems ShoppingCartItem[]
}

// Model for shopping carts
model ShoppingCartItem {
  productId      Int
  quantity       Int
  shoppingCartId Int
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id])

  @@id([productId, shoppingCartId])
}

// Model for orders
model Order {
  id                Int             @id @default(autoincrement())
  orderDate         DateTime        @default(now())
  status            OrderStatus?    @default(value: PENDING)
  orderDetails      OrderDetail[]
  deliveryFee       Float           @default(0)
  userId            Int
  shippingAddressId Int
  user              User            @relation(fields: [userId], references: [id])
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  payment           Payment?
}

// Model for order details
model OrderDetail {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

// Model for payments
model Payment {
  id          Int           @id @default(autoincrement())
  paymentDate DateTime      @default(now())
  amount      Float
  method      String
  status      PaymentStatus @default(value: PENDING)
  orderId     Int           @unique
  order       Order         @relation(fields: [orderId], references: [id])
}

// Model for payment methods
model Card {
  id     Int    @id @default(autoincrement())
  userId Int
  number String
  cvv    String
  month  String
  year   String
  name   String
  user   User   @relation(fields: [userId], references: [id])
}

// Model for shipping addresses
model ShippingAddress {
  id          Int     @id @default(autoincrement())
  userId      Int
  address     String
  subdistrict String
  district    String
  province    String
  postalCode  String
  order       Order[]
  user        User    @relation(fields: [userId], references: [id])
}
